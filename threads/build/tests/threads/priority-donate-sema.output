Kernel command line: -q run priority-donate-sema
0 ~ 9fc00 1
100000 ~ 13e0000 1
Pintos booting with: 
	base_mem: 0x0 ~ 0x9fc00 (Usable: 639 kB)
	ext_mem: 0x100000 ~ 0x13e0000 (Usable: 19,328 kB)
<<<<<<< HEAD
Calibrating timer...  155,443,200 loops/s.
=======
Calibrating timer...  117,760,000 loops/s.
>>>>>>> 566c6152a88b76e783f47c4867d00302b67006ec
Boot complete.
Executing 'priority-donate-sema':
(priority-donate-sema) begin
(priority-donate-sema) Thread L acquired lock.
<<<<<<< HEAD
Interrupt 0x0e (#PF Page-Fault Exception) at rip=800420a6bf
 cr2=fffffffffffffff8 error=               0
rax ffffffffffffffe0 rbx 0000000000204400 rcx 0000008004234020 rdx 0000000000000000
rsp 0000008004000db0 rbp 0000008004000e10 rsi 0000008004235020 rdi 0000008004235038
rip 000000800420a6bf r8 0000008004000e5c  r9 000000800421698a r10 0000000000000000
r11 0000000000000000 r12 0000000000000000 r13 0000000000000000 r14 0000000000000000
r15 0000000000000000 rflags 00200083
es: 0010 ds: 0010 cs: 0008 ss: 0010
Kernel PANIC at ../../threads/interrupt.c:361 in intr_handler(): Unexpected interrupt
Call stack: 0x8004213668 0x8004208ac2 0x8004208e74 0x80042143ee 0x8004214789 0x8004209c15 0x8004218914 0x8004216ade 0x8004206636 0x8004206783 0x8004206120.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 24 ticks
Thread: 0 idle ticks, 24 kernel ticks, 0 user ticks
Console: 1
=======
(priority-donate-sema) Thread M finished.
(priority-donate-sema) Main thread finished.
(priority-donate-sema) end
Execution of 'priority-donate-sema' complete.
Timer: 27 ticks
Thread: 0 idle ticks, 27 kernel ticks, 0 user ticks
Console: 591 characters output
Keyboard: 0 keys pressed
Powering off...
>>>>>>> 566c6152a88b76e783f47c4867d00302b67006ec
